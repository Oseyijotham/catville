{"version":3,"file":"static/js/690.634227de.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cinema/Cinema.module.css?0f2e","components/Cinema/Cinema.jsx","webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchBar\":\"Cinema_searchBar__6VvLv\",\"form\":\"Cinema_form__lTkNV\",\"button\":\"Cinema_button__2ipbp\",\"movieImage\":\"Cinema_movieImage__gKL3W\",\"movieGallery\":\"Cinema_movieGallery__pQY0j\",\"movieInfo\":\"Cinema_movieInfo__JFNDn\",\"movieName\":\"Cinema_movieName__Uw7UI\",\"movieItem\":\"Cinema_movieItem__dcG0F\",\"galleryFrame\":\"Cinema_galleryFrame__IMWO7\"};","import { useUser } from '../CustomProviderComponent/CustomProviderComponent';\nimport { Link } from 'react-router-dom';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Loader } from '../Loader/Loader';\nimport PropTypes from 'prop-types';\nimport css from './Cinema.module.css';\n\nexport const Cinema = () => {\n  const { catMovies, myMovies, setMovieName, movieResults, isLoading } = useUser();\n  //const { movie } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('movie') ?? '';\n  useEffect(() => {\n    setMovieName(movieName);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieName]);\n\n  const settingMovieName = evt => {\n    evt.preventDefault();\n    setSearchParams({ movie: evt.target[0].value.trim() });\n    evt.target[1].style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target[1].style.boxShadow =\n        '0px 4px 6px -1px rgba(0, 0, 0, 0.3), 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 10px 12px -6px rgba(0, 0, 0, 0.4)';\n    }, 5000);\n    //evt.target.reset();\n  };\n  const location = useLocation();\n\n  return (\n    <div>\n      <header className={css.searchBar}>\n        <form className={css.form} onSubmit={settingMovieName}>\n          <input\n            className={css.input}\n            type=\"text\"\n            autoComplete=\"off\"\n            placeholder=\"Search for Movies\"\n          />\n\n          <button type=\"submit\" className={css.button}>\n            Search\n          </button>\n        </form>\n      </header>\n      <div className={css.galleryFrame}>\n        <Loader />\n        {myMovies.length !== 0 &&\n        movieResults.length === 0 &&\n        movieName === '' ? (\n          <ul className={css.movieGallery}>\n            {catMovies.map(movie => (\n              <li key={movie.id} name={movie.id} className={css.movieItem}>\n                <Link\n                  to={`${movie.id}`}\n                  name={movie.id}\n                  className={css.movieInfo}\n                  state={{ from: location }}\n                >\n                  <img\n                    className={css.movieImage}\n                    src={\n                      'https://image.tmdb.org/t/p/original/' + movie.poster_path\n                    }\n                    alt=\"Unavailable\"\n                  />\n                  <span className={css.movieName}>\n                    {movie.original_title || movie.original_name}\n                  </span>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        ) : movieName !== '' &&\n          movieResults.length !== 0 &&\n          myMovies.length !== 0 ? (\n          <ul className={css.movieGallery}>\n            {movieResults.map(movie => (\n              <li key={movie.id} className={css.movieItem}>\n                <Link\n                  to={`${movie.id}`}\n                  name={movie.id}\n                  className={css.movieInfo}\n                  state={{ from: location }}\n                >\n                  <img\n                    className={css.movieImage}\n                    src={\n                      'https://image.tmdb.org/t/p/original/' + movie.poster_path\n                    }\n                    alt=\"Unavailable\"\n                  />\n\n                  <span className={css.movieName}>\n                    {movie.original_title || movie.original_name}\n                  </span>\n                </Link>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          isLoading === false && <div>No Movies Found</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nCinema.propTypes = {\n  myMovies: PropTypes.array.isRequired,\n  setMovieName: PropTypes.func.isRequired,\n  movieResults: PropTypes.array.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nexport default Cinema;\n","// extracted by mini-css-extract-plugin\nexport default {\"backDrop\":\"Loader_backDrop__h+Bln\",\"loader\":\"Loader_loader__+lRPl\"};","import { useUser } from '../CustomProviderComponent/CustomProviderComponent';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport css from './Loader.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Loader = () => {\n  const { isLoading } = useUser();\n\n  return (\n    <>\n      {isLoading && (\n        <div className={css.backDrop}>\n          <ThreeCircles\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            color=\"rgb(216, 155, 75)\"\n            radius=\"9\"\n            ariaLabel=\"three-dots-loading\"\n            wrapperStyle={{}}\n            wrapperClass={css.loader}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nLoader.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n};\n"],"names":["Cinema","_searchParams$get","_useUser","useUser","catMovies","myMovies","setMovieName","movieResults","isLoading","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","movieName","get","useEffect","location","useLocation","_jsxs","children","_jsx","className","css","onSubmit","evt","preventDefault","movie","target","value","trim","style","boxShadow","setTimeout","type","autoComplete","placeholder","Loader","length","map","name","id","Link","to","concat","state","from","src","poster_path","alt","original_title","original_name","_Fragment","ThreeCircles","visible","height","width","color","radius","ariaLabel","wrapperStyle","wrapperClass"],"sourceRoot":""}